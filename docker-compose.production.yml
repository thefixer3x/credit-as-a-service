version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: caas_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-caas_platform}
      POSTGRES_USER: ${POSTGRES_USER:-caas_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - caas_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-caas_user} -d ${POSTGRES_DB:-caas_platform}"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: caas_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - caas_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Core Application Services
  caas-web:
    image: caas/web-dashboard:${VERSION:-latest}
    container_name: caas_web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_URL:-http://localhost:3002}
      - NEXT_PUBLIC_WS_URL=${WS_URL:-ws://localhost:3010}
      - NEXT_PUBLIC_APP_NAME=CaaS Platform
      - NEXT_PUBLIC_APP_VERSION=${VERSION:-1.0.0}
    networks:
      - caas_network
    depends_on:
      - caas-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  caas-admin:
    image: caas/admin-portal:${VERSION:-latest}
    container_name: caas_admin
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${API_URL:-http://localhost:3002}
      - REACT_APP_WS_URL=${WS_URL:-ws://localhost:3010}
      - REACT_APP_ADMIN_SECRET=${ADMIN_SECRET}
    networks:
      - caas_network
    depends_on:
      - caas-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  caas-api:
    image: caas/core-api:${VERSION:-latest}
    container_name: caas_api
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=postgresql://${POSTGRES_USER:-caas_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-caas_platform}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - SME_API_URL=${SME_API_URL}
      - SME_API_KEY=${SME_API_KEY}
      - BLOCKCHAIN_RPC_URL=${BLOCKCHAIN_RPC_URL}
      - BLOCKCHAIN_PRIVATE_KEY=${BLOCKCHAIN_PRIVATE_KEY}
      - EMAIL_SERVICE_URL=${EMAIL_SERVICE_URL}
      - SMS_SERVICE_URL=${SMS_SERVICE_URL}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    networks:
      - caas_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  caas-notifications:
    image: caas/notifications-service:${VERSION:-latest}
    container_name: caas_notifications
    restart: unless-stopped
    ports:
      - "3003:3003"
      - "3010:3010"
    environment:
      - NODE_ENV=production
      - NOTIFICATIONS_SERVICE_PORT=3003
      - NOTIFICATIONS_WS_PORT=3010
      - DATABASE_URL=postgresql://${POSTGRES_USER:-caas_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-caas_platform}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - EVENT_BUS_ENABLED=true
      - EMAIL_SERVICE_URL=${EMAIL_SERVICE_URL}
      - SMS_SERVICE_URL=${SMS_SERVICE_URL}
      - PUSH_SERVICE_URL=${PUSH_SERVICE_URL}
    networks:
      - caas_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  caas-documents:
    image: caas/document-service:${VERSION:-latest}
    container_name: caas_documents
    restart: unless-stopped
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DATABASE_URL=postgresql://${POSTGRES_USER:-caas_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-caas_platform}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - STORAGE_TYPE=${STORAGE_TYPE:-local}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - OCR_SERVICE_URL=${OCR_SERVICE_URL}
      - ANTIVIRUS_SERVICE_URL=${ANTIVIRUS_SERVICE_URL}
    volumes:
      - documents:/app/documents
    networks:
      - caas_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  caas-risk-assessment:
    image: caas/risk-assessment:${VERSION:-latest}
    container_name: caas_risk_assessment
    restart: unless-stopped
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - PORT=3005
      - DATABASE_URL=postgresql://${POSTGRES_USER:-caas_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-caas_platform}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - ML_MODEL_URL=${ML_MODEL_URL}
      - CREDIT_BUREAU_API_URL=${CREDIT_BUREAU_API_URL}
      - CREDIT_BUREAU_API_KEY=${CREDIT_BUREAU_API_KEY}
      - RISK_THRESHOLD_LOW=${RISK_THRESHOLD_LOW:-300}
      - RISK_THRESHOLD_HIGH=${RISK_THRESHOLD_HIGH:-650}
    networks:
      - caas_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  caas-payments:
    image: caas/payment-service:${VERSION:-latest}
    container_name: caas_payments
    restart: unless-stopped
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
      - PORT=3006
      - DATABASE_URL=postgresql://${POSTGRES_USER:-caas_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-caas_platform}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - PAYMENT_GATEWAY_URL=${PAYMENT_GATEWAY_URL}
      - PAYMENT_GATEWAY_SECRET=${PAYMENT_GATEWAY_SECRET}
      - PAYSTACK_SECRET_KEY=${PAYSTACK_SECRET_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - BLOCKCHAIN_RPC_URL=${BLOCKCHAIN_RPC_URL}
      - ESCROW_CONTRACT_ADDRESS=${ESCROW_CONTRACT_ADDRESS}
    networks:
      - caas_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  caas-monitoring:
    image: caas/monitoring-service:${VERSION:-latest}
    container_name: caas_monitoring
    restart: unless-stopped
    ports:
      - "3007:3007"
      - "9090:9090" # Prometheus metrics
    environment:
      - NODE_ENV=production
      - MONITORING_PORT=3007
      - METRICS_PORT=9090
      - DATABASE_URL=postgresql://${POSTGRES_USER:-caas_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-caas_platform}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - PROMETHEUS_ENABLED=true
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./monitoring/dashboards:/app/dashboards:ro
      - logs:/app/logs:ro
    networks:
      - caas_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # B2B Credit Provider Services
  caas-credit-providers:
    image: caas/credit-providers-api:${VERSION:-latest}
    container_name: caas_credit_providers
    restart: unless-stopped
    ports:
      - "3008:3008"
    environment:
      - NODE_ENV=production
      - PORT=3008
      - DATABASE_URL=postgresql://${POSTGRES_USER:-caas_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-caas_platform}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - PROVIDER_ONBOARDING_WEBHOOK=${PROVIDER_ONBOARDING_WEBHOOK}
      - COMPLIANCE_API_URL=${COMPLIANCE_API_URL}
      - COMPLIANCE_API_KEY=${COMPLIANCE_API_KEY}
    networks:
      - caas_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  caas-admin-provider-management:
    image: caas/admin-provider-management:${VERSION:-latest}
    container_name: caas_admin_provider_management
    restart: unless-stopped
    ports:
      - "3012:3012"
    environment:
      - NODE_ENV=production
      - PORT=3012
      - DATABASE_URL=postgresql://${POSTGRES_USER:-caas_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-caas_platform}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - ADMIN_SECRET=${ADMIN_SECRET}
      - EMAIL_SERVICE_URL=${EMAIL_SERVICE_URL}
      - SMS_SERVICE_URL=${SMS_SERVICE_URL}
      - INTEGRATION_TEST_BASE_URL=${INTEGRATION_TEST_BASE_URL}
      - PROVIDER_API_BASE_URL=${PROVIDER_API_BASE_URL}
      - INTEGRATION_BASE_URL=${INTEGRATION_BASE_URL}
      - MARGIN_CALCULATION_ENABLED=true
      - CUSTOM_INTEGRATION_ENABLED=true
    networks:
      - caas_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3012/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  caas-provider-dashboard:
    image: caas/provider-dashboard:${VERSION:-latest}
    container_name: caas_provider_dashboard
    restart: unless-stopped
    ports:
      - "3009:3009"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_URL:-http://localhost:3002}
      - NEXT_PUBLIC_PROVIDER_API_URL=${PROVIDER_API_URL:-http://localhost:3008}
      - NEXT_PUBLIC_WS_URL=${WS_URL:-ws://localhost:3010}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
    networks:
      - caas_network
    depends_on:
      - caas-credit-providers
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3009/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: caas_prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - caas_network
    depends_on:
      - caas-monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: caas_grafana
    restart: unless-stopped
    ports:
      - "3011:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - caas_network
    depends_on:
      - prometheus

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: caas_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - static_files:/var/www/static:ro
    networks:
      - caas_network
    depends_on:
      - caas-web
      - caas-admin
      - caas-api
      - caas-provider-dashboard
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local
  documents:
    driver: local
  logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  static_files:
    driver: local

networks:
  caas_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16