name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  BUN_VERSION: '1.0.0'

jobs:
  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: caas_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install

      - name: Setup test environment
        run: |
          cp tests/.env.test .env.test
          echo "DATABASE_URL=postgresql://test:test@localhost:5433/caas_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6380" >> .env.test

      - name: Setup test database
        run: |
          cd tests
          bun run db:test-setup

      - name: Run type checking
        run: bun run typecheck

      - name: Run linting
        run: bun run lint

      - name: Run unit tests
        run: |
          cd tests
          bun run test:unit --coverage

      - name: Run integration tests
        run: |
          cd tests
          bun run test:integration --coverage

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./tests/coverage/lcov.info
          flags: unittests,integration
          name: codecov-umbrella

      - name: Upload test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results
          path: tests/junit.xml
          reporter: java-junit

  # End-to-End Tests
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: test

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: caas_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install

      - name: Install Playwright
        run: |
          cd tests
          bunx playwright install --with-deps chromium firefox webkit

      - name: Setup test environment
        run: |
          cp tests/.env.test .env.test
          echo "DATABASE_URL=postgresql://test:test@localhost:5433/caas_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6380" >> .env.test

      - name: Setup test database
        run: |
          cd tests
          bun run db:test-setup

      - name: Build applications
        run: bun run build

      - name: Start test servers
        run: |
          # Start API server in background
          bun run --cwd apps/api start &
          sleep 10
          
          # Start web server in background
          bun run --cwd apps/web start &
          sleep 10
          
          # Wait for servers to be ready
          curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:8000/health
          curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:3000

      - name: Run E2E tests
        run: |
          cd tests
          bun run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: tests/playwright-report/
          retention-days: 7

      - name: Upload E2E screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-screenshots
          path: tests/test-results/
          retention-days: 7

  # Security Tests
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install

      - name: Run security audit
        run: bun audit

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'credit-as-a-service-platform'
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental
            --suppression suppression.xml

      - name: Upload OWASP results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/

  # Performance Tests
  performance:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: caas_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install

      - name: Setup test environment
        run: |
          cp tests/.env.test .env.test
          echo "DATABASE_URL=postgresql://test:test@localhost:5433/caas_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6380" >> .env.test

      - name: Setup test database
        run: |
          cd tests
          bun run db:test-setup

      - name: Build applications
        run: bun run build

      - name: Start API server
        run: |
          bun run --cwd apps/api start &
          sleep 10
          curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:8000/health

      - name: Install K6
        run: |
          curl https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz -L | tar xvz --strip-components 1

      - name: Run performance tests
        run: |
          cd tests/performance
          ../../k6 run --summary-export=results.json auth-performance.js
          ../../k6 run --summary-export=results.json credit-application-performance.js
          ../../k6 run --summary-export=results.json payment-performance.js

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: tests/performance/results.json

  # Contract Tests (if using contract testing)
  contract:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install

      - name: Run contract tests
        run: |
          cd tests
          bun run test:contract

      - name: Publish Pact contracts
        if: github.ref == 'refs/heads/main'
        run: |
          cd tests
          bun run pact:publish
        env:
          PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_URL }}
          PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}

  # Test Summary
  test-summary:
    runs-on: ubuntu-latest
    needs: [test, e2e, security]
    if: always()

    steps:
      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: |
            tests/junit.xml
            tests/playwright-report/results.xml
        if: always()

      - name: Comment PR with test results
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && always()
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.issue;
            
            const testStatus = '${{ needs.test.result }}';
            const e2eStatus = '${{ needs.e2e.result }}';
            const securityStatus = '${{ needs.security.result }}';
            
            let message = '## Test Results\n\n';
            message += `- Unit & Integration Tests: ${testStatus === 'success' ? '✅' : '❌'} ${testStatus}\n`;
            message += `- E2E Tests: ${e2eStatus === 'success' ? '✅' : '❌'} ${e2eStatus}\n`;
            message += `- Security Tests: ${securityStatus === 'success' ? '✅' : '❌'} ${securityStatus}\n`;
            
            if (testStatus !== 'success' || e2eStatus !== 'success' || securityStatus !== 'success') {
              message += '\n⚠️ Some tests failed. Please check the workflow logs for details.';
            } else {
              message += '\n🎉 All tests passed!';
            }
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: message
            });

  # Test Coverage Report
  coverage:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - name: Download coverage artifacts
        uses: actions/download-artifact@v3
        with:
          name: coverage-report

      - name: Coverage Report
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          title: Test Coverage Report